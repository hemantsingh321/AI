% 8 Puzzle Problem Solver

% Possible moves for the blank (represented by 0)
move([0,X2,X3,X4,X5,X6,X7,X8,X9], [X2,0,X3,X4,X5,X6,X7,X8,X9]).  % Right
move([X1,0,X3,X4,X5,X6,X7,X8,X9], [0,X1,X3,X4,X5,X6,X7,X8,X9]).  % Left
move([X1,X2,0,X4,X5,X6,X7,X8,X9], [X1,0,X2,X4,X5,X6,X7,X8,X9]).  % Left
move([X1,X2,X3,0,X5,X6,X7,X8,X9], [X1,X2,X3,X5,0,X6,X7,X8,X9]).  % Down
move([X1,X2,X3,X4,0,X6,X7,X8,X9], [X1,X2,X3,0,X4,X6,X7,X8,X9]).  % Up
move([X1,X2,X3,X4,X5,0,X7,X8,X9], [X1,X2,X3,X4,0,X5,X7,X8,X9]).  % Left
move([X1,X2,X3,X4,X5,X6,0,X8,X9], [X1,X2,X3,X4,X5,X6,X8,0,X9]).  % Right
move([X1,X2,X3,X4,X5,X6,X7,0,X9], [X1,X2,X3,X4,X5,X6,X7,X9,0]).  % Right
move([X1,X2,X3,X4,X5,X6,X7,X8,0], [X1,X2,X3,X4,X5,X6,X7,0,X8]).  % Left

% Add vertical moves
move([X1,X2,X3,X4,X5,X6,X7,X8,X9], [X4,X2,X3,X1,X5,X6,X7,X8,X9]) :- X1 = 0.  % Down
move([X1,X2,X3,X4,X5,X6,X7,X8,X9], [X1,X5,X3,X4,X2,X6,X7,X8,X9]) :- X2 = 0.  % Down
move([X1,X2,X3,X4,X5,X6,X7,X8,X9], [X1,X2,X6,X4,X5,X3,X7,X8,X9]) :- X3 = 0.  % Down
move([X1,X2,X3,X4,X5,X6,X7,X8,X9], [X1,X2,X3,X7,X5,X6,X4,X8,X9]) :- X4 = 0.  % Up
move([X1,X2,X3,X4,X5,X6,X7,X8,X9], [X1,X2,X3,X4,X8,X6,X7,X5,X9]) :- X5 = 0.  % Up
move([X1,X2,X3,X4,X5,X6,X7,X8,X9], [X1,X2,X3,X4,X5,X9,X7,X8,X6]) :- X6 = 0.  % Up

% Goal state definition
goal([1,2,3,4,5,6,7,8,0]).

% Helper predicate to check if element is member of list
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).

% Breadth-First Search (BFS) to solve the puzzle
solve(Start, Solution) :- 
    bfs([[Start, []]], Solution).

% Base case: current state matches goal
bfs([[State, Path]|_], Path) :- 
    goal(State).

% Recursive case: explore next states
bfs([[State, Path]|Rest], Solution) :-
    findall([NextState, [Move|Path]], 
            (move(State, NextState), 
             \+ member(NextState, [State|Path]),
             Move = NextState), 
            NextStates),
    append(Rest, NextStates, NewQueue),
    bfs(NewQueue, Solution).

//command to check 
consult('8puzzle.pl').
solve([2, 8, 3, 1, 6, 4, 7, 0, 5], Solution).


